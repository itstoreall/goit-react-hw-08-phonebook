{"version":3,"sources":["views/Views.module.scss","views/RegisterView.jsx"],"names":["module","exports","RegisterView","state","name","email","password","showPassword","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onRegister","handlePasswordChange","prop","event","handleClickShowPassword","handleMouseDownPassword","this","className","s","formWrap","onSubmit","form","autoComplete","id","label","variant","input","type","onChange","htmlFor","endAdornment","position","aria-label","onClick","onMouseDown","edge","labelWidth","formBtn","Component","mapDispatchToProps","authOperations","register","connect"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,SAAW,wBAAwB,KAAO,oBAAoB,MAAQ,qBAAqB,MAAQ,qBAAqB,QAAU,yB,8OCanLC,E,4MACJC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,cAAc,G,EAGhBC,aAAe,YAAkC,IAAD,IAA9BC,OAAUL,EAAoB,EAApBA,KAAMM,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBP,EAAOM,K,EAG1BE,aAAe,SAACC,GACdA,EAAEC,iBAEF,EAAKC,MAAMC,WAAW,EAAKb,OAE3B,EAAKQ,SAAS,CAAEP,KAAM,GAAIC,MAAO,GAAIC,SAAU,M,EAGjDW,qBAAuB,SAACC,GAAD,OAAU,SAACC,GAChC,EAAKR,SAAL,2BAAmB,EAAKR,OAAxB,kBAAgCe,EAAOC,EAAMV,OAAOC,W,EAGtDU,wBAA0B,WACxB,EAAKT,SAAL,2BAAmB,EAAKR,OAAxB,IAA+BI,cAAe,EAAKJ,MAAMI,iB,EAG3Dc,wBAA0B,SAACF,GACzBA,EAAML,kB,4CAGR,WAAU,IAAD,EAC2BQ,KAAKnB,MAA/BC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,SAErB,OACE,sBAAKiB,UAAWC,IAAEC,SAAlB,UACE,8CAEA,uBACEC,SAAUJ,KAAKV,aACfW,UAAWC,IAAEG,KACbC,aAAa,MAHf,UAKE,cAAC,IAAD,CACEC,GAAG,sBACHC,MAAM,OACNC,QAAQ,WACRR,UAAWC,IAAEQ,MACbC,KAAK,OACL7B,KAAK,OACLM,MAAON,EACP8B,SAAUZ,KAAKd,eAGjB,cAAC,IAAD,CACEqB,GAAG,uBACHC,MAAM,QACNC,QAAQ,WACRR,UAAWC,IAAEQ,MACbC,KAAK,QACL7B,KAAK,QACLM,MAAOL,EACP6B,SAAUZ,KAAKd,eAGjB,eAAC,IAAD,CACEe,UAAWC,IAAEQ,MAEbD,QAAQ,WAHV,UAKE,cAAC,IAAD,CAAYI,QAAQ,8BAApB,sBAGA,cAAC,IAAD,CACEF,KAAMX,KAAKnB,MAAMI,aAAe,OAAS,WAEzC2B,SAAUZ,KAAKL,qBAAqB,YACpCY,GAAG,8BAEHzB,KAAK,WACLM,MAAOJ,EAEP8B,aACE,cAAC,IAAD,CAAgBC,SAAS,MAAzB,SACE,cAAC,IAAD,CACEC,aAAW,6BACXC,QAASjB,KAAKF,wBACdoB,YAAalB,KAAKD,wBAClBoB,KAAK,MAJP,SAMGnB,KAAKnB,MAAMI,aACV,cAAC,IAAD,IAEA,cAAC,IAAD,QAKRmC,WAAY,QAIhB,cAAC,IAAD,CACEX,QAAQ,YACRR,UAAWC,IAAEmB,QACbV,KAAK,SAHP,oC,GAvGiBW,aAqHrBC,EAAqB,CACzB7B,WAAY8B,IAAeC,UAGdC,sBAAQ,KAAMH,EAAdG,CAAkC9C","file":"static/js/Register.8afc9274.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Views_container__1voF8\",\"formWrap\":\"Views_formWrap__2J9S5\",\"form\":\"Views_form__3aUqB\",\"label\":\"Views_label__3Qumt\",\"input\":\"Views_input__Tx9hG\",\"formBtn\":\"Views_formBtn__eCIIF\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { authOperations } from '../redux/auth';\nimport s from './Views.module.scss';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Button from '@material-ui/core/Button';\n\nclass RegisterView extends Component {\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    showPassword: false,\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onRegister(this.state);\n\n    this.setState({ name: '', email: '', password: '' });\n  };\n\n  handlePasswordChange = (prop) => (event) => {\n    this.setState({ ...this.state, [prop]: event.target.value });\n  };\n\n  handleClickShowPassword = () => {\n    this.setState({ ...this.state, showPassword: !this.state.showPassword });\n  };\n\n  handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  render() {\n    const { name, email, password } = this.state;\n\n    return (\n      <div className={s.formWrap}>\n        <h1>Registration</h1>\n\n        <form\n          onSubmit={this.handleSubmit}\n          className={s.form}\n          autoComplete='off'\n        >\n          <TextField\n            id='name-outlined-basic'\n            label='Name'\n            variant='outlined'\n            className={s.input}\n            type='text'\n            name='name'\n            value={name}\n            onChange={this.handleChange}\n          />\n\n          <TextField\n            id='email-outlined-basic'\n            label='Email'\n            variant='outlined'\n            className={s.input}\n            type='email'\n            name='email'\n            value={email}\n            onChange={this.handleChange}\n          />\n\n          <FormControl\n            className={s.input}\n            // className={clsx(makeStyles.margin, makeStyles.textField)}\n            variant='outlined'\n          >\n            <InputLabel htmlFor='outlined-adornment-password'>\n              Password\n            </InputLabel>\n            <OutlinedInput\n              type={this.state.showPassword ? 'text' : 'password'}\n              // value={values.password}\n              onChange={this.handlePasswordChange('password')}\n              id='outlined-adornment-password'\n              // type='password'\n              name='password'\n              value={password}\n              // onChange={this.handleChange}\n              endAdornment={\n                <InputAdornment position='end'>\n                  <IconButton\n                    aria-label='toggle password visibility'\n                    onClick={this.handleClickShowPassword}\n                    onMouseDown={this.handleMouseDownPassword}\n                    edge='end'\n                  >\n                    {this.state.showPassword ? (\n                      <Visibility />\n                    ) : (\n                      <VisibilityOff />\n                    )}\n                  </IconButton>\n                </InputAdornment>\n              }\n              labelWidth={70}\n            />\n          </FormControl>\n\n          <Button\n            variant='contained'\n            className={s.formBtn}\n            type='submit'\n            // onClick={onLogout}\n          >\n            Register now\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onRegister: authOperations.register,\n};\n\nexport default connect(null, mapDispatchToProps)(RegisterView);\n\n/*\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { authOperations } from '../redux/auth';\nimport s from './Views.module.scss';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Button from '@material-ui/core/Button';\n\nclass RegisterView extends Component {\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    showPassword: false,\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onRegister(this.state);\n\n    this.setState({ name: '', email: '', password: '' });\n  };\n\n  render() {\n    const { name, email, password } = this.state;\n\n    return (\n      <div>\n        <h1>Registration Page</h1>\n\n        <form\n          onSubmit={this.handleSubmit}\n          className={s.form}\n          autoComplete='off'\n        >\n          <label className={s.label}>\n            Name\n            <input\n              type='text'\n              name='name'\n              value={name}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className={s.label}>\n            E-mail\n            <input\n              type='email'\n              name='email'\n              value={email}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className={s.label}>\n            Password\n            <input\n              type='password'\n              name='password'\n              value={password}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <button type='submit'>Register now</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onRegister: authOperations.register,\n};\n\nexport default connect(null, mapDispatchToProps)(RegisterView);\n\n*/\n"],"sourceRoot":""}